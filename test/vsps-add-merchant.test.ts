/**
 * File Generated by Sideko (sideko.dev)
 */
import Client from "@public/visa_subscription_manager";
import * as types from "@public/visa_subscription_manager/types";

// test client mehtods (keep comment for code generation)

describe("tests client.vsps.add.merchant.create", () => {
  test.concurrent("200 generated_success_add_merchant_s1", async () => {
    // Generated success test for addMerchant_s1 body example from OpenAPI
    const client = new Client({
      baseUrl:
        "https://api.sideko.dev/v1/mock/public/visa-subscription-manager/0.1.0",
    });
    const response = await client.vsps.add.merchant.create({
      clientId: "string",
      data: {
        additional: {
          additionalNotes: "Creating 5 Merchant level stops",
          paymentFrequency: types.AdditionalPaymentFrequencyEnum.OneOff,
        },
        duration: 13,
        merchantCategoryCode: "0799",
        merchantIdentifiers: {
          cardAcceptorIds: ["012569990001111"],
          grouped: [
            {
              cardAcceptorId: "12569990002222",
              merchantName: "FLIXNET",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
          ],
          merchantNames: ["FLIXNET", "FLIXNET UK"],
          paymentFacilitators: [
            {
              paymentFacilitatorId: "PAIPAL",
              subMerchantId: "001010101010102",
            },
            {
              paymentFacilitatorId: "PAIPAL",
              subMerchantId: "001010101010104",
            },
          ],
        },
        oneTimeStop: false,
        pan: "4111111111111111",
        recurringAndInstallmentIndicator: false,
        startDate: "2021-02-01",
        transactionAmount: {
          exactAmount: 100,
          maxAmount: 500,
          minAmount: 50.5,
        },
      },
    });
    console.log(response);
  });
  test.concurrent("200 generated_success_add_merchant_s2", async () => {
    // Generated success test for addMerchant_s2 body example from OpenAPI
    const client = new Client({
      baseUrl:
        "https://api.sideko.dev/v1/mock/public/visa-subscription-manager/0.1.0",
    });
    const response = await client.vsps.add.merchant.create({
      clientId: "string",
      data: {
        additional: {
          additionalNotes: "Notes entered by the user",
          paymentFrequency: types.AdditionalPaymentFrequencyEnum.OneOff,
        },
        duration: 1,
        merchantCategoryCode: "7801",
        merchantIdentifiers: {
          cardAcceptorIds: ["12569990001112", "12569990001113"],
          grouped: [
            {
              cardAcceptorId: "12569990002222",
              merchantName: "FLIXNET",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
          ],
          merchantNames: ["FLIXNET"],
          paymentFacilitators: [
            {
              paymentFacilitatorId: "PAIPAL",
              subMerchantId: "001010101010102",
            },
          ],
        },
        oneTimeStop: false,
        pan: "4111111111111129",
        recurringAndInstallmentIndicator: false,
        startDate: "2021-02-02",
        transactionAmount: {
          exactAmount: 100,
          maxAmount: 1000,
          minAmount: 100,
        },
      },
    });
    console.log(response);
  });
  test.concurrent("200 generated_success_add_merchant_s3", async () => {
    // Generated success test for addMerchant_s3 body example from OpenAPI
    const client = new Client({
      baseUrl:
        "https://api.sideko.dev/v1/mock/public/visa-subscription-manager/0.1.0",
    });
    const response = await client.vsps.add.merchant.create({
      clientId: "string",
      data: {
        additional: {
          additionalNotes: "Notes entered by the user",
          paymentFrequency: types.AdditionalPaymentFrequencyEnum.OneOff,
        },
        duration: 1,
        merchantCategoryCode: "7801",
        merchantIdentifiers: {
          cardAcceptorIds: ["12569990001111"],
          grouped: [
            {
              cardAcceptorId: "12569990002222",
              merchantName: "FLIXNET",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
          ],
          merchantNames: ["FLIXNET PRIME"],
          paymentFacilitators: [
            {
              paymentFacilitatorId: "PAIPAL",
              subMerchantId: "001010101010102",
            },
          ],
        },
        oneTimeStop: false,
        pan: "4111111111111152",
        recurringAndInstallmentIndicator: false,
        startDate: "2021-02-01",
        transactionAmount: {
          exactAmount: 100,
          maxAmount: 500,
          minAmount: 50.5,
        },
      },
    });
    console.log(response);
  });
  test.concurrent("200 generated_success_add_merchant_s4", async () => {
    // Generated success test for addMerchant_s4 body example from OpenAPI
    const client = new Client({
      baseUrl:
        "https://api.sideko.dev/v1/mock/public/visa-subscription-manager/0.1.0",
    });
    const response = await client.vsps.add.merchant.create({
      clientId: "string",
      data: {
        additional: {
          additionalNotes: "Notes entered by the user",
          paymentFrequency: types.AdditionalPaymentFrequencyEnum.OneOff,
        },
        duration: 61,
        merchantCategoryCode: "7801",
        merchantIdentifiers: {
          cardAcceptorIds: ["12569990001111"],
          grouped: [
            {
              cardAcceptorId: "12569990002222",
              merchantName: "FLIXNET",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
          ],
          merchantNames: ["FLIXNET PRIME"],
          paymentFacilitators: [
            {
              paymentFacilitatorId: "PAIPAL",
              subMerchantId: "001010101010102",
            },
          ],
        },
        oneTimeStop: false,
        pan: "4111111111111152",
        recurringAndInstallmentIndicator: false,
        startDate: "2021-02-01",
        transactionAmount: {
          exactAmount: 100,
          maxAmount: 500,
          minAmount: 50.5,
        },
      },
    });
    console.log(response);
  });
  test.concurrent("200 generated_success_add_merchant_s5", async () => {
    // Generated success test for addMerchant_s5 body example from OpenAPI
    const client = new Client({
      baseUrl:
        "https://api.sideko.dev/v1/mock/public/visa-subscription-manager/0.1.0",
    });
    const response = await client.vsps.add.merchant.create({
      clientId: "string",
      data: {
        additional: {
          additionalNotes: "Creating 5 Merchant level stops",
          paymentFrequency: types.AdditionalPaymentFrequencyEnum.OneOff,
        },
        duration: 13,
        merchantCategoryCode: "0799",
        merchantIdentifiers: {
          cardAcceptorIds: ["12569990001111"],
          grouped: [
            {
              cardAcceptorId: "12569990002222",
              merchantName: "FLIXNET",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
            {
              cardAcceptorId: "395709186305",
              merchantName: "FLIXNET PRIME",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
            {
              cardAcceptorId: "395709186305",
              merchantName: "FLIXNET UK",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
            {
              cardAcceptorId: "012569990001111",
              merchantName: "FLIXNET",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
          ],
          merchantNames: ["FLIXNET"],
          paymentFacilitators: [
            {
              paymentFacilitatorId: "PAIPAL",
              subMerchantId: "001010101010102",
            },
          ],
        },
        oneTimeStop: false,
        pan: "4111111111111111",
        recurringAndInstallmentIndicator: true,
        startDate: "2021-02-01",
        transactionAmount: {
          exactAmount: 100,
          maxAmount: 500,
          minAmount: 50.5,
        },
      },
    });
    console.log(response);
  });
  test.concurrent("200 generated_success_add_merchant_s6", async () => {
    // Generated success test for addMerchant_s6 body example from OpenAPI
    const client = new Client({
      baseUrl:
        "https://api.sideko.dev/v1/mock/public/visa-subscription-manager/0.1.0",
    });
    const response = await client.vsps.add.merchant.create({
      clientId: "string",
      data: {
        additional: {
          additionalNotes: "Notes entered by the user",
          paymentFrequency: types.AdditionalPaymentFrequencyEnum.OneOff,
        },
        duration: 1,
        merchantCategoryCode: "7801",
        merchantIdentifiers: {
          cardAcceptorIds: ["337186000108778"],
          grouped: [
            {
              cardAcceptorId: "12569990002222",
              merchantName: "FLIXNET",
              paymentFacilitator: {
                paymentFacilitatorId: "PAIPAL",
                subMerchantId: "001010101010102",
              },
            },
          ],
          merchantNames: ["FLIXNET"],
          paymentFacilitators: [
            {
              paymentFacilitatorId: "PAIPAL",
              subMerchantId: "001010101010102",
            },
          ],
        },
        oneTimeStop: false,
        pan: "4072208010000000",
        recurringAndInstallmentIndicator: false,
        startDate: "2022-08-01",
        transactionAmount: {
          exactAmount: 100,
          maxAmount: 500,
          minAmount: 50.5,
        },
      },
    });
    console.log(response);
  });
});
